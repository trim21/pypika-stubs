from _typeshed import Incomplete
from pypika.enums import Dialects as Dialects
from pypika.queries import (
    CreateQueryBuilder as CreateQueryBuilder,
    Database as Database,
    DropQueryBuilder as DropQueryBuilder,
    Query as Query,
    QueryBuilder as QueryBuilder,
    Selectable as Selectable,
    Table as Table,
)
from pypika.terms import (
    ArithmeticExpression as ArithmeticExpression,
    Criterion as Criterion,
    EmptyCriterion as EmptyCriterion,
    Field as Field,
    Function as Function,
    Star as Star,
    Term as Term,
    ValueWrapper as ValueWrapper,
)
from pypika.utils import (
    QueryException as QueryException,
    builder as builder,
    format_quotes as format_quotes,
)
from typing import Any, Self

class SnowflakeQuery(Query):
    @classmethod
    def create_table(cls, table: str | Table) -> SnowflakeCreateQueryBuilder: ...
    @classmethod
    def drop_table(cls, table: str | Table) -> SnowflakeDropQueryBuilder: ...

class SnowflakeQueryBuilder(QueryBuilder):
    QUOTE_CHAR: Incomplete
    ALIAS_QUOTE_CHAR: str
    QUERY_ALIAS_QUOTE_CHAR: str
    QUERY_CLS = SnowflakeQuery
    def __init__(self, **kwargs: Any) -> None: ...

class SnowflakeCreateQueryBuilder(CreateQueryBuilder):
    QUOTE_CHAR: Incomplete
    QUERY_CLS = SnowflakeQuery
    def __init__(self) -> None: ...

class SnowflakeDropQueryBuilder(DropQueryBuilder):
    QUOTE_CHAR: Incomplete
    QUERY_CLS = SnowflakeQuery
    def __init__(self) -> None: ...

class MySQLQuery(Query):
    @classmethod
    def load(cls, fp: str) -> MySQLLoadQueryBuilder: ...
    @classmethod
    def create_table(cls, table: str | Table) -> MySQLCreateQueryBuilder: ...
    @classmethod
    def drop_table(cls, table: str | Table) -> MySQLDropQueryBuilder: ...

class MySQLQueryBuilder(QueryBuilder):
    QUOTE_CHAR: str
    QUERY_CLS = MySQLQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def __copy__(self) -> MySQLQueryBuilder: ...
    def for_update(
        self, nowait: bool = False, skip_locked: bool = False, of: tuple[str, ...] = ()
    ) -> QueryBuilder: ...
    def on_duplicate_key_update(
        self, field: Field | str, value: Any
    ) -> MySQLQueryBuilder: ...
    def on_duplicate_key_ignore(self) -> MySQLQueryBuilder: ...
    def get_sql(self, **kwargs: Any) -> str: ...
    def modifier(self, value: str) -> MySQLQueryBuilder: ...

class MySQLLoadQueryBuilder:
    QUERY_CLS = MySQLQuery
    def __init__(self) -> None: ...
    def load(self, fp: str) -> MySQLLoadQueryBuilder: ...
    def into(self, table: str | Table) -> MySQLLoadQueryBuilder: ...
    def get_sql(self, *args: Any, **kwargs: Any) -> str: ...

class MySQLCreateQueryBuilder(CreateQueryBuilder):
    QUOTE_CHAR: str

class MySQLDropQueryBuilder(DropQueryBuilder):
    QUOTE_CHAR: str

class VerticaQuery(Query):
    @classmethod
    def from_file(cls, fp: str) -> VerticaCopyQueryBuilder: ...
    @classmethod
    def create_table(cls, table: str | Table) -> VerticaCreateQueryBuilder: ...

class VerticaQueryBuilder(QueryBuilder):
    QUERY_CLS = VerticaQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def hint(self, label: str) -> VerticaQueryBuilder: ...
    def get_sql(self, *args: Any, **kwargs: Any) -> str: ...

class VerticaCreateQueryBuilder(CreateQueryBuilder):
    QUERY_CLS = VerticaQuery
    def __init__(self) -> None: ...
    def local(self) -> VerticaCreateQueryBuilder: ...
    def preserve_rows(self) -> VerticaCreateQueryBuilder: ...

class VerticaCopyQueryBuilder:
    QUERY_CLS = VerticaQuery
    def __init__(self) -> None: ...
    def from_file(self, fp: str) -> VerticaCopyQueryBuilder: ...
    def copy_(self, table: str | Table) -> VerticaCopyQueryBuilder: ...
    def get_sql(self, *args: Any, **kwargs: Any) -> str: ...

class FetchNextAndOffsetRowsQueryBuilder(QueryBuilder):
    def fetch_next(self, limit: int) -> Self: ...

class OracleQuery(Query): ...

class OracleQueryBuilder(FetchNextAndOffsetRowsQueryBuilder):
    QUOTE_CHAR: Incomplete
    QUERY_CLS = OracleQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def get_sql(self, *args: Any, **kwargs: Any) -> str: ...

class PostgreSQLQuery(Query): ...

class PostgreSQLQueryBuilder(QueryBuilder):
    ALIAS_QUOTE_CHAR: str
    QUERY_CLS = PostgreSQLQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def __copy__(self) -> PostgreSQLQueryBuilder: ...
    def distinct_on(self, *fields: str | Term) -> PostgreSQLQueryBuilder: ...
    def for_update(
        self, nowait: bool = False, skip_locked: bool = False, of: tuple[str, ...] = ()
    ) -> QueryBuilder: ...
    def on_conflict(self, *target_fields: str | Term) -> PostgreSQLQueryBuilder: ...
    def do_nothing(self) -> PostgreSQLQueryBuilder: ...
    def do_update(
        self, update_field: str | Field, update_value: Any | None = None
    ) -> PostgreSQLQueryBuilder: ...
    def where(self, criterion: Criterion) -> PostgreSQLQueryBuilder: ...
    def using(self, table: Selectable | str) -> QueryBuilder: ...
    def returning(self, *terms: Any) -> PostgreSQLQueryBuilder: ...
    def get_sql(
        self, with_alias: bool = False, subquery: bool = False, **kwargs: Any
    ) -> str: ...

class RedshiftQuery(Query): ...

class RedShiftQueryBuilder(QueryBuilder):
    QUERY_CLS = RedshiftQuery

class MSSQLQuery(Query): ...

class MSSQLQueryBuilder(FetchNextAndOffsetRowsQueryBuilder):
    QUERY_CLS = MSSQLQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def top(
        self, value: str | int, percent: bool = False, with_ties: bool = False
    ) -> MSSQLQueryBuilder: ...
    def get_sql(self, *args: Any, **kwargs: Any) -> str: ...

class ClickHouseQuery(Query):
    @classmethod
    def drop_database(self, database: Database | str) -> ClickHouseDropQueryBuilder: ...
    @classmethod
    def drop_table(self, table: Table | str) -> ClickHouseDropQueryBuilder: ...
    @classmethod
    def drop_dictionary(self, dictionary: str) -> ClickHouseDropQueryBuilder: ...
    @classmethod
    def drop_quota(self, quota: str) -> ClickHouseDropQueryBuilder: ...
    @classmethod
    def drop_user(self, user: str) -> ClickHouseDropQueryBuilder: ...
    @classmethod
    def drop_view(self, view: str) -> ClickHouseDropQueryBuilder: ...

class ClickHouseQueryBuilder(QueryBuilder):
    QUERY_CLS = ClickHouseQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def sample(
        self, sample: int, offset: int | None = None
    ) -> ClickHouseQueryBuilder: ...

class ClickHouseDropQueryBuilder(DropQueryBuilder):
    QUERY_CLS = ClickHouseQuery
    def __init__(self) -> None: ...
    def drop_dictionary(self, dictionary: str) -> ClickHouseDropQueryBuilder: ...
    def drop_quota(self, quota: str) -> ClickHouseDropQueryBuilder: ...
    def on_cluster(self, cluster: str) -> ClickHouseDropQueryBuilder: ...
    def get_sql(self, **kwargs: Any) -> str: ...

class SQLLiteValueWrapper(ValueWrapper):
    def get_value_sql(self, **kwargs: Any) -> str: ...

class SQLLiteQuery(Query): ...

class SQLLiteQueryBuilder(QueryBuilder):
    QUERY_CLS = SQLLiteQuery
    def __init__(self, **kwargs: Any) -> None: ...
    def insert_or_replace(self, *terms: Any) -> SQLLiteQueryBuilder: ...
